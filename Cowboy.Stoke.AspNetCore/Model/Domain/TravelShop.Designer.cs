//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 2019/3/20 13:40:16
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Data;
using System.Linq;
using System.Linq.Expressions;
using System.ComponentModel;
using System.Reflection;
using System.Data.Common;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Cowboy.TravelShop.Model
{

    /// <summary>
    /// There are no comments for StrokeContext class in the schema.
    /// </summary>
    public partial class StrokeContext : DbContext
    {

        /// <summary>
        /// There are no comments for StrokeContext constructor in the schema.
        /// </summary>
        public StrokeContext() :
            base()
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for StrokeContext constructor in the schema.
        /// </summary>
        public StrokeContext(DbContextOptions<StrokeContext> options) :
            base(options)
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for OnConfiguring(DbContextOptionsBuilder optionsBuilder) method in the schema.
        /// </summary>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseMySql(@"User Id=root;Password=BCL123@;Host=bcl.baocailang.com;Database=cowboy_travelshop;Persist Security Info=True");
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        /// <summary>
        /// Allows you to customize the configuration of model.
        /// </summary>
        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        /// <summary>
        /// There are no comments for Users property in the schema.
        /// </summary>
        public virtual DbSet<User> Users
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for allies property in the schema.
        /// </summary>
        public virtual DbSet<allies> allies
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserSources property in the schema.
        /// </summary>
        public virtual DbSet<UserSource> UserSources
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for PaySecurities property in the schema.
        /// </summary>
        public virtual DbSet<PaySecurity> PaySecurities
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserandAllies property in the schema.
        /// </summary>
        public virtual DbSet<UserandAllies> UserandAllies
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserandUsers property in the schema.
        /// </summary>
        public virtual DbSet<UserandUser> UserandUsers
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for ThirdPartyLogins property in the schema.
        /// </summary>
        public virtual DbSet<ThirdPartyLogin> ThirdPartyLogins
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Strokes property in the schema.
        /// </summary>
        public virtual DbSet<Stroke> Strokes
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for StrokeCategories property in the schema.
        /// </summary>
        public virtual DbSet<StrokeCategory> StrokeCategories
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for StrokeCollects property in the schema.
        /// </summary>
        public virtual DbSet<StrokeCollect> StrokeCollects
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for StrokeShares property in the schema.
        /// </summary>
        public virtual DbSet<StrokeShare> StrokeShares
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Orders property in the schema.
        /// </summary>
        public virtual DbSet<Order> Orders
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for ShoppingCarts property in the schema.
        /// </summary>
        public virtual DbSet<ShoppingCart> ShoppingCarts
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Cities property in the schema.
        /// </summary>
        public virtual DbSet<City> Cities
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Payments property in the schema.
        /// </summary>
        public virtual DbSet<Payment> Payments
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for PaymentCallbacks property in the schema.
        /// </summary>
        public virtual DbSet<PaymentCallback> PaymentCallbacks
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Ad property in the schema.
        /// </summary>
        public virtual DbSet<Ad> Ad
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for SmsSends property in the schema.
        /// </summary>
        public virtual DbSet<SmsSend> SmsSends
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Customizes property in the schema.
        /// </summary>
        public virtual DbSet<Customize> Customizes
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for VerificationCodes property in the schema.
        /// </summary>
        public virtual DbSet<VerificationCode> VerificationCodes
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for GroupSendings property in the schema.
        /// </summary>
        public virtual DbSet<GroupSending> GroupSendings
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Managers property in the schema.
        /// </summary>
        public virtual DbSet<Manager> Managers
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserShares property in the schema.
        /// </summary>
        public virtual DbSet<UserShare> UserShares
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Integrals property in the schema.
        /// </summary>
        public virtual DbSet<Integral> Integrals
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for IntegralRecords property in the schema.
        /// </summary>
        public virtual DbSet<IntegralRecord> IntegralRecords
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for OnModelCreating in the schema.
        /// </summary>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            this.UserMapping(modelBuilder);
            this.CustomizeUserMapping(modelBuilder);

            this.alliesMapping(modelBuilder);
            this.CustomizealliesMapping(modelBuilder);

            this.UserSourceMapping(modelBuilder);
            this.CustomizeUserSourceMapping(modelBuilder);

            this.PaySecurityMapping(modelBuilder);
            this.CustomizePaySecurityMapping(modelBuilder);

            this.UserandAlliesMapping(modelBuilder);
            this.CustomizeUserandAlliesMapping(modelBuilder);

            this.UserandUserMapping(modelBuilder);
            this.CustomizeUserandUserMapping(modelBuilder);

            this.ThirdPartyLoginMapping(modelBuilder);
            this.CustomizeThirdPartyLoginMapping(modelBuilder);

            this.StrokeMapping(modelBuilder);
            this.CustomizeStrokeMapping(modelBuilder);

            this.StrokeCategoryMapping(modelBuilder);
            this.CustomizeStrokeCategoryMapping(modelBuilder);

            this.StrokeCollectMapping(modelBuilder);
            this.CustomizeStrokeCollectMapping(modelBuilder);

            this.StrokeShareMapping(modelBuilder);
            this.CustomizeStrokeShareMapping(modelBuilder);

            this.OrderMapping(modelBuilder);
            this.CustomizeOrderMapping(modelBuilder);

            this.ShoppingCartMapping(modelBuilder);
            this.CustomizeShoppingCartMapping(modelBuilder);

            this.CityMapping(modelBuilder);
            this.CustomizeCityMapping(modelBuilder);

            this.PaymentMapping(modelBuilder);
            this.CustomizePaymentMapping(modelBuilder);

            this.PaymentCallbackMapping(modelBuilder);
            this.CustomizePaymentCallbackMapping(modelBuilder);

            this.AdMapping(modelBuilder);
            this.CustomizeAdMapping(modelBuilder);

            this.SmsSendMapping(modelBuilder);
            this.CustomizeSmsSendMapping(modelBuilder);

            this.CustomizeMapping(modelBuilder);
            this.CustomizeCustomizeMapping(modelBuilder);

            this.VerificationCodeMapping(modelBuilder);
            this.CustomizeVerificationCodeMapping(modelBuilder);

            this.GroupSendingMapping(modelBuilder);
            this.CustomizeGroupSendingMapping(modelBuilder);

            this.ManagerMapping(modelBuilder);
            this.CustomizeManagerMapping(modelBuilder);

            this.UserShareMapping(modelBuilder);
            this.CustomizeUserShareMapping(modelBuilder);

            this.IntegralMapping(modelBuilder);
            this.CustomizeIntegralMapping(modelBuilder);

            this.IntegralRecordMapping(modelBuilder);
            this.CustomizeIntegralRecordMapping(modelBuilder);

            RelationshipsMapping(modelBuilder);
            CustomizeMapping(ref modelBuilder);
        }
    
        #region User Mapping

        /// <summary>
        /// There are no comments for UserMapping in the schema.
        /// </summary>
        private void UserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<User>().ToTable(@"Users");
            modelBuilder.Entity<User>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<User>().Property<string>(x => x.Cphone).HasColumnName(@"Cphone").ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"''");
            modelBuilder.Entity<User>().Property<string>(x => x.PassWord).HasColumnName(@"PassWord").ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"''");
            modelBuilder.Entity<User>().Property<string>(x => x.UserName).HasColumnName(@"UserName").ValueGeneratedNever().HasMaxLength(80).HasDefaultValueSql(@"''");
            modelBuilder.Entity<User>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<User>().Property<System.Nullable<short>>(x => x.Age).HasColumnName(@"Age").ValueGeneratedNever().HasDefaultValueSql(@"22");
            modelBuilder.Entity<User>().Property<System.Nullable<bool>>(x => x.Sex).HasColumnName(@"Sex").ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<User>().Property<System.Nullable<long>>(x => x.CityId).HasColumnName(@"CityId").ValueGeneratedNever().HasDefaultValueSql(@"860571");
            modelBuilder.Entity<User>().Property<string>(x => x.WeChatNo).HasColumnName(@"WeChatNo").ValueGeneratedNever().HasMaxLength(100).HasDefaultValueSql(@"''");
            modelBuilder.Entity<User>().Property<string>(x => x.ImageUrl).HasColumnName(@"ImageUrl").ValueGeneratedNever().HasMaxLength(200).HasDefaultValueSql(@"''");
            modelBuilder.Entity<User>().Property<string>(x => x.ImageThumb).HasColumnName(@"ImageThumb").ValueGeneratedNever().HasMaxLength(200).HasDefaultValueSql(@"''");
            modelBuilder.Entity<User>().Property<string>(x => x.ShareImage).HasColumnName(@"ShareImage").ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"""""");
            modelBuilder.Entity<User>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timestamp");
            modelBuilder.Entity<User>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeUserMapping in the schema.
        /// </summary>
        partial void CustomizeUserMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region allies Mapping

        /// <summary>
        /// There are no comments for alliesMapping in the schema.
        /// </summary>
        private void alliesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<allies>().ToTable(@"allies");
            modelBuilder.Entity<allies>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<allies>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"''");
            modelBuilder.Entity<allies>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<allies>().Property<string>(x => x.ShareImage).HasColumnName(@"ShareImage").IsRequired().ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"""""");
            modelBuilder.Entity<allies>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<allies>().Property<System.DateTime>(x => x.UpdateTime).HasColumnName(@"UpdateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<allies>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizealliesMapping in the schema.
        /// </summary>
        partial void CustomizealliesMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region UserSource Mapping

        /// <summary>
        /// There are no comments for UserSourceMapping in the schema.
        /// </summary>
        private void UserSourceMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserSource>().ToTable(@"User_Source");
            modelBuilder.Entity<UserSource>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserSource>().Property<UserFrom>(x => x.From).HasColumnName(@"From").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<UserSource>().Property<string>(x => x.Adress).HasColumnName(@"Adress").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<UserSource>().Property<string>(x => x.City).HasColumnName(@"City").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"''");
            modelBuilder.Entity<UserSource>().Property<long>(x => x.CityId).HasColumnName(@"CityId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserSource>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timestamp");
            modelBuilder.Entity<UserSource>().HasKey(@"UserId");
        }
	
        /// <summary>
        /// There are no comments for CustomizeUserSourceMapping in the schema.
        /// </summary>
        partial void CustomizeUserSourceMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region PaySecurity Mapping

        /// <summary>
        /// There are no comments for PaySecurityMapping in the schema.
        /// </summary>
        private void PaySecurityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PaySecurity>().ToTable(@"Pay_Security");
            modelBuilder.Entity<PaySecurity>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaySecurity>().Property<string>(x => x.PayPassWord).HasColumnName(@"PayPassWord").IsRequired().ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"''");
            modelBuilder.Entity<PaySecurity>().Property<long>(x => x.CreateBy).HasColumnName(@"CreateBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaySecurity>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timestamp");
            modelBuilder.Entity<PaySecurity>().Property<long>(x => x.UpdateBy).HasColumnName(@"UpdateBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaySecurity>().Property<System.DateTime>(x => x.UpdateTime).HasColumnName(@"UpdateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<PaySecurity>().HasKey(@"UserId");
        }
	
        /// <summary>
        /// There are no comments for CustomizePaySecurityMapping in the schema.
        /// </summary>
        partial void CustomizePaySecurityMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region UserandAllies Mapping

        /// <summary>
        /// There are no comments for UserandAlliesMapping in the schema.
        /// </summary>
        private void UserandAlliesMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserandAllies>().ToTable(@"User_and_Allies");
            modelBuilder.Entity<UserandAllies>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserandAllies>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserandAllies>().Property<long>(x => x.AlliesId).HasColumnName(@"AlliesId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserandAllies>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<UserandAllies>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<UserandAllies>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeUserandAlliesMapping in the schema.
        /// </summary>
        partial void CustomizeUserandAlliesMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region UserandUser Mapping

        /// <summary>
        /// There are no comments for UserandUserMapping in the schema.
        /// </summary>
        private void UserandUserMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserandUser>().ToTable(@"User_and_User");
            modelBuilder.Entity<UserandUser>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<UserandUser>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserandUser>().Property<long>(x => x.InvitedUser).HasColumnName(@"InvitedUser").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserandUser>().Property<string>(x => x.Remark).HasColumnName(@"Remark").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<UserandUser>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<UserandUser>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeUserandUserMapping in the schema.
        /// </summary>
        partial void CustomizeUserandUserMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region ThirdPartyLogin Mapping

        /// <summary>
        /// There are no comments for ThirdPartyLoginMapping in the schema.
        /// </summary>
        private void ThirdPartyLoginMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ThirdPartyLogin>().ToTable(@"Third_Party_Login");
            modelBuilder.Entity<ThirdPartyLogin>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ThirdPartyLogin>().Property<LoginType>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ThirdPartyLogin>().Property<string>(x => x.OpenId).HasColumnName(@"OpenId").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"''");
            modelBuilder.Entity<ThirdPartyLogin>().Property<bool>(x => x.Sex).HasColumnName(@"Sex").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<ThirdPartyLogin>().Property<byte>(x => x.Age).HasColumnName(@"Age").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"18");
            modelBuilder.Entity<ThirdPartyLogin>().Property<string>(x => x.Adress).HasColumnName(@"Adress").IsRequired().ValueGeneratedNever().HasMaxLength(75).HasDefaultValueSql(@"''");
            modelBuilder.Entity<ThirdPartyLogin>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timestamp");
            modelBuilder.Entity<ThirdPartyLogin>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeThirdPartyLoginMapping in the schema.
        /// </summary>
        partial void CustomizeThirdPartyLoginMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Stroke Mapping

        /// <summary>
        /// There are no comments for StrokeMapping in the schema.
        /// </summary>
        private void StrokeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Stroke>().ToTable(@"Stroke");
            modelBuilder.Entity<Stroke>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Stroke>().Property<string>(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Stroke>().Property<string>(x => x.Detail).HasColumnName(@"Detail").IsRequired().ValueGeneratedNever().HasMaxLength(2500);
            modelBuilder.Entity<Stroke>().Property<string>(x => x.SearchKey).HasColumnName(@"SearchKey").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Stroke>().Property<long>(x => x.CategoryId).HasColumnName(@"CategoryId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Stroke>().Property<string>(x => x.ImageUrl).HasColumnName(@"ImageUrl").IsRequired().ValueGeneratedNever().HasMaxLength(80).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Stroke>().Property<string>(x => x.ImageThumb).HasColumnName(@"ImageThumb").IsRequired().ValueGeneratedNever().HasMaxLength(80).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Stroke>().Property<sbyte>(x => x.NumberDay).HasColumnName(@"NumberDay").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"3");
            modelBuilder.Entity<Stroke>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Stroke>().Property<bool>(x => x.IsRecommend).HasColumnName(@"IsRecommend").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Stroke>().Property<bool>(x => x.IsHot).HasColumnName(@"IsHot").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Stroke>().Property<bool>(x => x.IsNew).HasColumnName(@"IsNew").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Stroke>().Property<string>(x => x.City).HasColumnName(@"City").IsRequired().ValueGeneratedNever().HasMaxLength(40).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Stroke>().Property<decimal>(x => x.Price).HasColumnName(@"Price").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Stroke>().Property<string>(x => x.Destination).HasColumnName(@"Destination").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Stroke>().Property<decimal>(x => x.SpecialPrice).HasColumnName(@"SpecialPrice").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Stroke>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Stroke>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeStrokeMapping in the schema.
        /// </summary>
        partial void CustomizeStrokeMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region StrokeCategory Mapping

        /// <summary>
        /// There are no comments for StrokeCategoryMapping in the schema.
        /// </summary>
        private void StrokeCategoryMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StrokeCategory>().ToTable(@"Stroke_Category");
            modelBuilder.Entity<StrokeCategory>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<StrokeCategory>().Property<string>(x => x.CategoryName).HasColumnName(@"CategoryName").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"''");
            modelBuilder.Entity<StrokeCategory>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<StrokeCategory>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_TimeStamp");
            modelBuilder.Entity<StrokeCategory>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeStrokeCategoryMapping in the schema.
        /// </summary>
        partial void CustomizeStrokeCategoryMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region StrokeCollect Mapping

        /// <summary>
        /// There are no comments for StrokeCollectMapping in the schema.
        /// </summary>
        private void StrokeCollectMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StrokeCollect>().ToTable(@"Stroke_Collect");
            modelBuilder.Entity<StrokeCollect>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<StrokeCollect>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StrokeCollect>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<StrokeCollect>().Property<long>(x => x.StrokeId).HasColumnName(@"StrokeId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StrokeCollect>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<StrokeCollect>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeStrokeCollectMapping in the schema.
        /// </summary>
        partial void CustomizeStrokeCollectMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region StrokeShare Mapping

        /// <summary>
        /// There are no comments for StrokeShareMapping in the schema.
        /// </summary>
        private void StrokeShareMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<StrokeShare>().ToTable(@"Stroke_Share");
            modelBuilder.Entity<StrokeShare>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<StrokeShare>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StrokeShare>().Property<long>(x => x.StrokeId).HasColumnName(@"StrokeId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<StrokeShare>().Property<short>(x => x.ShareNumber).HasColumnName(@"ShareNumber").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<StrokeShare>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<StrokeShare>().Property<System.DateTime>(x => x.UpdateTime).HasColumnName(@"UpdateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<StrokeShare>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeStrokeShareMapping in the schema.
        /// </summary>
        partial void CustomizeStrokeShareMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Order Mapping

        /// <summary>
        /// There are no comments for OrderMapping in the schema.
        /// </summary>
        private void OrderMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Order>().ToTable(@"Order");
            modelBuilder.Entity<Order>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Order>().Property<string>(x => x.OrderNo).HasColumnName(@"OrderNo").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Order>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property<long>(x => x.StrokeId).HasColumnName(@"StrokeId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property<string>(x => x.City).HasColumnName(@"City").IsRequired().ValueGeneratedNever().HasMaxLength(65).HasDefaultValueSql(@"""""");
            modelBuilder.Entity<Order>().Property<string>(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever().HasMaxLength(65).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Order>().Property<string>(x => x.ImageUrl).HasColumnName(@"ImageUrl").IsRequired().ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"""""");
            modelBuilder.Entity<Order>().Property<string>(x => x.Destination).HasColumnName(@"Destination").IsRequired().ValueGeneratedNever().HasMaxLength(65).HasDefaultValueSql(@"""""");
            modelBuilder.Entity<Order>().Property<sbyte>(x => x.NumberDay).HasColumnName(@"NumberDay").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"3");
            modelBuilder.Entity<Order>().Property<OrderStatus>(x => x.OrderStatus).HasColumnName(@"OrderStatus").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Order>().Property<decimal>(x => x.Price).HasColumnName(@"Price").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Order>().Property<short>(x => x.TotalCount).HasColumnName(@"TotalCount").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property<decimal>(x => x.TotalAmount).HasColumnName(@"TotalAmount").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Order>().Property<PaymentType>(x => x.Payment).HasColumnName(@"Payment").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Order>().Property<long>(x => x.ShareUser).HasColumnName(@"ShareUser").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Order>().Property<UserFrom>(x => x.From).HasColumnName(@"From").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Order>().Property<string>(x => x.Remark).HasColumnName(@"Remark").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Order>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Order>().Property<System.DateTime>(x => x.UpdateTime).HasColumnName(@"UpdateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Order>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeOrderMapping in the schema.
        /// </summary>
        partial void CustomizeOrderMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region ShoppingCart Mapping

        /// <summary>
        /// There are no comments for ShoppingCartMapping in the schema.
        /// </summary>
        private void ShoppingCartMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ShoppingCart>().ToTable(@"Shopping_Cart");
            modelBuilder.Entity<ShoppingCart>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<ShoppingCart>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShoppingCart>().Property<long>(x => x.StrokeId).HasColumnName(@"StrokeId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShoppingCart>().Property<short>(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShoppingCart>().Property<string>(x => x.Remark).HasColumnName(@"Remark").IsRequired().ValueGeneratedNever().HasMaxLength(45).HasDefaultValueSql(@"''");
            modelBuilder.Entity<ShoppingCart>().Property<long>(x => x.CreateBy).HasColumnName(@"CreateBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<ShoppingCart>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<ShoppingCart>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeShoppingCartMapping in the schema.
        /// </summary>
        partial void CustomizeShoppingCartMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region City Mapping

        /// <summary>
        /// There are no comments for CityMapping in the schema.
        /// </summary>
        private void CityMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<City>().ToTable(@"City");
            modelBuilder.Entity<City>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<City>().Property<bool>(x => x.IsOpen).HasColumnName(@"IsOpen").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<City>().Property<bool>(x => x.IsHot).HasColumnName(@"IsHot").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<City>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(30).HasDefaultValueSql(@"''");
            modelBuilder.Entity<City>().Property<long>(x => x.ParentId).HasColumnName(@"ParentId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<City>().Property<string>(x => x.SimpleSpell).HasColumnName(@"SimpleSpell").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"''");
            modelBuilder.Entity<City>().Property<string>(x => x.FullSpell).HasColumnName(@"FullSpell").IsRequired().ValueGeneratedNever().HasMaxLength(30).HasDefaultValueSql(@"''");
            modelBuilder.Entity<City>().Property<long>(x => x.CreateBy).HasColumnName(@"CreateBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<City>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<City>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeCityMapping in the schema.
        /// </summary>
        partial void CustomizeCityMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Payment Mapping

        /// <summary>
        /// There are no comments for PaymentMapping in the schema.
        /// </summary>
        private void PaymentMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Payment>().ToTable(@"Payment");
            modelBuilder.Entity<Payment>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Payment>().Property<string>(x => x.OrderIds).HasColumnName(@"OrderIds").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Payment>().Property<byte>(x => x.PayEnvironment).HasColumnName(@"PayEnvironment").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Payment>().Property<PaymentType>(x => x.PaymentType).HasColumnName(@"PaymentType").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property<bool>(x => x.Status).HasColumnName(@"Status").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Payment>().Property<long>(x => x.CreateBy).HasColumnName(@"CreateBy").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Payment>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Payment>().Property<long>(x => x.UpdateBy).HasColumnName(@"UpdateBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Payment>().Property<System.DateTime>(x => x.UpdateTime).HasColumnName(@"UpdateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Payment>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizePaymentMapping in the schema.
        /// </summary>
        partial void CustomizePaymentMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region PaymentCallback Mapping

        /// <summary>
        /// There are no comments for PaymentCallbackMapping in the schema.
        /// </summary>
        private void PaymentCallbackMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<PaymentCallback>().ToTable(@"Payment_callback");
            modelBuilder.Entity<PaymentCallback>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<PaymentCallback>().Property<long>(x => x.PaymentId).HasColumnName(@"PaymentId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<PaymentCallback>().Property<bool>(x => x.OutTradeStatus).HasColumnName(@"OutTradeStatus").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<PaymentCallback>().Property<string>(x => x.TradeNo).HasColumnName(@"TradeNo").IsRequired().ValueGeneratedNever().HasMaxLength(80).HasDefaultValueSql(@"''");
            modelBuilder.Entity<PaymentCallback>().Property<string>(x => x.OutTradeParameter).HasColumnName(@"OutTradeParameter").IsRequired().ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"''");
            modelBuilder.Entity<PaymentCallback>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<PaymentCallback>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizePaymentCallbackMapping in the schema.
        /// </summary>
        partial void CustomizePaymentCallbackMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Ad Mapping

        /// <summary>
        /// There are no comments for AdMapping in the schema.
        /// </summary>
        private void AdMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Ad>().ToTable(@"Ad");
            modelBuilder.Entity<Ad>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Ad>().Property<string>(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Ad>().Property<ADType>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Ad>().Property<long>(x => x.StrokeId).HasColumnName(@"StrokeId").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Ad>().Property<bool>(x => x.IsActive).HasColumnName(@"IsActive").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ad>().Property<string>(x => x.Link).HasColumnName(@"Link").IsRequired().ValueGeneratedNever().HasMaxLength(80).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Ad>().Property<long>(x => x.CityId).HasColumnName(@"CityId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Ad>().Property<string>(x => x.Content).HasColumnName(@"Content").IsRequired().ValueGeneratedNever().HasMaxLength(35).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Ad>().Property<string>(x => x.ImageUrl).HasColumnName(@"ImageUrl").IsRequired().ValueGeneratedNever().HasMaxLength(35).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Ad>().Property<string>(x => x.ImageThumb).HasColumnName(@"ImageThumb").IsRequired().ValueGeneratedNever().HasMaxLength(35).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Ad>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Ad>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeAdMapping in the schema.
        /// </summary>
        partial void CustomizeAdMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region SmsSend Mapping

        /// <summary>
        /// There are no comments for SmsSendMapping in the schema.
        /// </summary>
        private void SmsSendMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<SmsSend>().ToTable(@"Sms_Send");
            modelBuilder.Entity<SmsSend>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<SmsSend>().Property<string>(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"''");
            modelBuilder.Entity<SmsSend>().Property<string>(x => x.Cphone).HasColumnName(@"Cphone").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"''");
            modelBuilder.Entity<SmsSend>().Property<string>(x => x.Content).HasColumnName(@"Content").IsRequired().ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"''");
            modelBuilder.Entity<SmsSend>().Property<string>(x => x.Code).HasColumnName(@"Code").IsRequired().ValueGeneratedNever().HasMaxLength(25).HasDefaultValueSql(@"''");
            modelBuilder.Entity<SmsSend>().Property<bool>(x => x.IsSuccess).HasColumnName(@"IsSuccess").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<SmsSend>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<SmsSend>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeSmsSendMapping in the schema.
        /// </summary>
        partial void CustomizeSmsSendMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Customize Mapping

        /// <summary>
        /// There are no comments for CustomizeMapping in the schema.
        /// </summary>
        private void CustomizeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Customize>().ToTable(@"Customize");
            modelBuilder.Entity<Customize>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Customize>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Customize>().Property<string>(x => x.StartCity).HasColumnName(@"StartCity").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Customize>().Property<string>(x => x.Destination).HasColumnName(@"Destination").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Customize>().Property<string>(x => x.CustomizeNo).HasColumnName(@"CustomizeNo").IsRequired().ValueGeneratedNever().HasMaxLength(60).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Customize>().Property<string>(x => x.Cphone).HasColumnName(@"Cphone").IsRequired().ValueGeneratedNever().HasMaxLength(40).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Customize>().Property<CustomizeStatus>(x => x.Status).HasColumnName(@"Status").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Customize>().Property<int>(x => x.Adult).HasColumnName(@"Adult").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Customize>().Property<int>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<Customize>().Property<int>(x => x.Children).HasColumnName(@"Children").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Customize>().Property<decimal>(x => x.TotalAmount).HasColumnName(@"TotalAmount").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Customize>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(30).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Customize>().Property<decimal>(x => x.Budget).HasColumnName(@"Budget").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Customize>().Property<int>(x => x.NumberDay).HasColumnName(@"NumberDay").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"3");
            modelBuilder.Entity<Customize>().Property<System.DateTime>(x => x.StartDate).HasColumnName(@"StartDate").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"Current_timeStamp");
            modelBuilder.Entity<Customize>().Property<string>(x => x.Remark).HasColumnName(@"Remark").IsRequired().ValueGeneratedNever().HasMaxLength(40).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Customize>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Customize>().Property<System.DateTime>(x => x.UpdateTime).HasColumnName(@"UpdateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_TimeStamp");
            modelBuilder.Entity<Customize>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeCustomizeMapping in the schema.
        /// </summary>
        partial void CustomizeCustomizeMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region VerificationCode Mapping

        /// <summary>
        /// There are no comments for VerificationCodeMapping in the schema.
        /// </summary>
        private void VerificationCodeMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<VerificationCode>().ToTable(@"Verificatio_nCode");
            modelBuilder.Entity<VerificationCode>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<VerificationCode>().Property<string>(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever().HasMaxLength(20).HasDefaultValueSql(@"''");
            modelBuilder.Entity<VerificationCode>().Property<byte>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<VerificationCode>().Property<string>(x => x.Content).HasColumnName(@"Content").IsRequired().ValueGeneratedNever().HasMaxLength(80).HasDefaultValueSql(@"''");
            modelBuilder.Entity<VerificationCode>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<VerificationCode>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeVerificationCodeMapping in the schema.
        /// </summary>
        partial void CustomizeVerificationCodeMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region GroupSending Mapping

        /// <summary>
        /// There are no comments for GroupSendingMapping in the schema.
        /// </summary>
        private void GroupSendingMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<GroupSending>().ToTable(@"Group_Sending");
            modelBuilder.Entity<GroupSending>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<GroupSending>().Property<string>(x => x.Title).HasColumnName(@"Title").IsRequired().ValueGeneratedNever().HasMaxLength(15).HasDefaultValueSql(@"''");
            modelBuilder.Entity<GroupSending>().Property<byte>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<GroupSending>().Property<string>(x => x.Content).HasColumnName(@"Content").IsRequired().ValueGeneratedNever().HasMaxLength(85).HasDefaultValueSql(@"''");
            modelBuilder.Entity<GroupSending>().Property<long>(x => x.Quantity).HasColumnName(@"Quantity").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<GroupSending>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<GroupSending>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeGroupSendingMapping in the schema.
        /// </summary>
        partial void CustomizeGroupSendingMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Manager Mapping

        /// <summary>
        /// There are no comments for ManagerMapping in the schema.
        /// </summary>
        private void ManagerMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Manager>().ToTable(@"Manager");
            modelBuilder.Entity<Manager>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<Manager>().Property<string>(x => x.Cphone).HasColumnName(@"Cphone").IsRequired().ValueGeneratedNever().HasMaxLength(35);
            modelBuilder.Entity<Manager>().Property<string>(x => x.PassWord).HasColumnName(@"PassWord").IsRequired().ValueGeneratedNever().HasMaxLength(80).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Manager>().Property<string>(x => x.Name).HasColumnName(@"Name").IsRequired().ValueGeneratedNever().HasMaxLength(30).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Manager>().Property<string>(x => x.ImageUrl).HasColumnName(@"ImageUrl").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Manager>().Property<string>(x => x.ImageThumb).HasColumnName(@"ImageThumb").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<Manager>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Manager>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeManagerMapping in the schema.
        /// </summary>
        partial void CustomizeManagerMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region UserShare Mapping

        /// <summary>
        /// There are no comments for UserShareMapping in the schema.
        /// </summary>
        private void UserShareMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<UserShare>().ToTable(@"User_Share");
            modelBuilder.Entity<UserShare>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<UserShare>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserShare>().Property<byte>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"1");
            modelBuilder.Entity<UserShare>().Property<string>(x => x.ImageUrl).HasColumnName(@"ImageUrl").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<UserShare>().Property<string>(x => x.ImageThumb).HasColumnName(@"ImageThumb").IsRequired().ValueGeneratedNever().HasMaxLength(50).HasDefaultValueSql(@"''");
            modelBuilder.Entity<UserShare>().Property<long>(x => x.CreateBy).HasColumnName(@"CreateBy").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<UserShare>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<UserShare>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeUserShareMapping in the schema.
        /// </summary>
        partial void CustomizeUserShareMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region Integral Mapping

        /// <summary>
        /// There are no comments for IntegralMapping in the schema.
        /// </summary>
        private void IntegralMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Integral>().ToTable(@"Integral");
            modelBuilder.Entity<Integral>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<Integral>().Property<long>(x => x.Number).HasColumnName(@"Number").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"0");
            modelBuilder.Entity<Integral>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Integral>().Property<System.DateTime>(x => x.UpdateTime).HasColumnName(@"UpdateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<Integral>().HasKey(@"UserId");
        }
	
        /// <summary>
        /// There are no comments for CustomizeIntegralMapping in the schema.
        /// </summary>
        partial void CustomizeIntegralMapping(ModelBuilder modelBuilder);

        #endregion
    
        #region IntegralRecord Mapping

        /// <summary>
        /// There are no comments for IntegralRecordMapping in the schema.
        /// </summary>
        private void IntegralRecordMapping(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<IntegralRecord>().ToTable(@"IntegralRecord");
            modelBuilder.Entity<IntegralRecord>().Property<long>(x => x.Id).HasColumnName(@"Id").IsRequired().ValueGeneratedOnAdd();
            modelBuilder.Entity<IntegralRecord>().Property<long>(x => x.UserId).HasColumnName(@"UserId").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IntegralRecord>().Property<int>(x => x.Type).HasColumnName(@"Type").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IntegralRecord>().Property<long>(x => x.Number).HasColumnName(@"Number").IsRequired().ValueGeneratedNever();
            modelBuilder.Entity<IntegralRecord>().Property<System.DateTime>(x => x.CreateTime).HasColumnName(@"CreateTime").IsRequired().ValueGeneratedNever().HasDefaultValueSql(@"current_timeStamp");
            modelBuilder.Entity<IntegralRecord>().HasKey(@"Id");
        }
	
        /// <summary>
        /// There are no comments for CustomizeIntegralRecordMapping in the schema.
        /// </summary>
        partial void CustomizeIntegralRecordMapping(ModelBuilder modelBuilder);

        #endregion

        /// <summary>
        /// There are no comments for RelationshipsMapping in the schema.
        /// </summary>
        private void RelationshipsMapping(ModelBuilder modelBuilder)
        {

        #region User Navigation properties

            modelBuilder.Entity<User>().HasOne(x => x.PaySecurity).WithOne(op => op.User).IsRequired(true).HasForeignKey(typeof(User), @"Id");
            modelBuilder.Entity<User>().HasOne(x => x.UserSource).WithOne(op => op.User).IsRequired(true).HasForeignKey(typeof(User), @"Id");
            modelBuilder.Entity<User>().HasMany(x => x.ShoppingCarts).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<User>().HasMany(x => x.UserShares).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<User>().HasMany(x => x.UserandAllies).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<User>().HasMany(x => x.Orders).WithOne(op => op.User).IsRequired(true).HasForeignKey(@"UserId");
            modelBuilder.Entity<User>().HasOne(x => x.City).WithMany(op => op.Users).IsRequired(false).HasForeignKey(@"CityId");

        #endregion

        #region allies Navigation properties

            modelBuilder.Entity<allies>().HasMany(x => x.UserandAllies).WithOne(op => op.allies).IsRequired(true).HasForeignKey(@"AlliesId");

        #endregion

        #region UserSource Navigation properties

            modelBuilder.Entity<UserSource>().HasOne(x => x.User).WithOne(op => op.UserSource).IsRequired(true).HasForeignKey(typeof(User), @"Id");

        #endregion

        #region PaySecurity Navigation properties

            modelBuilder.Entity<PaySecurity>().HasOne(x => x.User).WithOne(op => op.PaySecurity).IsRequired(true).HasForeignKey(typeof(User), @"Id");

        #endregion

        #region UserandAllies Navigation properties

            modelBuilder.Entity<UserandAllies>().HasOne(x => x.allies).WithMany(op => op.UserandAllies).IsRequired(true).HasForeignKey(@"AlliesId");
            modelBuilder.Entity<UserandAllies>().HasOne(x => x.User).WithMany(op => op.UserandAllies).IsRequired(true).HasForeignKey(@"UserId");

        #endregion

        #region Stroke Navigation properties

            modelBuilder.Entity<Stroke>().HasOne(x => x.StokeShare).WithOne(op => op.Stoke).IsRequired(true).HasForeignKey(typeof(StrokeShare), @"StrokeId");
            modelBuilder.Entity<Stroke>().HasMany(x => x.StokeCollects).WithOne(op => op.Stoke).IsRequired(true).HasForeignKey(@"StrokeId");
            modelBuilder.Entity<Stroke>().HasOne(x => x.StokeCategory).WithMany(op => op.Stokes).IsRequired(true).HasForeignKey(@"CategoryId");

        #endregion

        #region StrokeCategory Navigation properties

            modelBuilder.Entity<StrokeCategory>().HasMany(x => x.Stokes).WithOne(op => op.StokeCategory).IsRequired(true).HasForeignKey(@"CategoryId");

        #endregion

        #region StrokeCollect Navigation properties

            modelBuilder.Entity<StrokeCollect>().HasOne(x => x.Stoke).WithMany(op => op.StokeCollects).IsRequired(true).HasForeignKey(@"StrokeId");

        #endregion

        #region StrokeShare Navigation properties

            modelBuilder.Entity<StrokeShare>().HasOne(x => x.Stoke).WithOne(op => op.StokeShare).IsRequired(true).HasForeignKey(typeof(StrokeShare), @"StrokeId");

        #endregion

        #region Order Navigation properties

            modelBuilder.Entity<Order>().HasOne(x => x.User).WithMany(op => op.Orders).IsRequired(true).HasForeignKey(@"UserId");

        #endregion

        #region ShoppingCart Navigation properties

            modelBuilder.Entity<ShoppingCart>().HasOne(x => x.User).WithMany(op => op.ShoppingCarts).IsRequired(true).HasForeignKey(@"UserId");

        #endregion

        #region City Navigation properties

            modelBuilder.Entity<City>().HasMany(x => x.Users).WithOne(op => op.City).IsRequired(false).HasForeignKey(@"CityId");

        #endregion

        #region Payment Navigation properties

            modelBuilder.Entity<Payment>().HasOne(x => x.PaymentCallback).WithOne(op => op.Payment).IsRequired(true).HasForeignKey(typeof(PaymentCallback), @"PaymentId");

        #endregion

        #region PaymentCallback Navigation properties

            modelBuilder.Entity<PaymentCallback>().HasOne(x => x.Payment).WithOne(op => op.PaymentCallback).IsRequired(true).HasForeignKey(typeof(PaymentCallback), @"PaymentId");

        #endregion

        #region UserShare Navigation properties

            modelBuilder.Entity<UserShare>().HasOne(x => x.User).WithMany(op => op.UserShares).IsRequired(true).HasForeignKey(@"UserId");

        #endregion
        }


        /// <summary>
        /// There are no comments for CustomizeMapping in the schema.
        /// </summary>
        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        /// <summary>
        /// There are no comments for HasChanges property in the schema.
        /// </summary>
        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }


        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();
    }
}

namespace Cowboy.TravelShop.Model
{
    /// <summary>
    /// 用户
    /// </summary>
    [Serializable()]
    public partial class User : ICloneable {

        /// <summary>
        /// There are no comments for User constructor in the schema.
        /// </summary>
        public User()
        {
            this.Cphone = @"";
            this.PassWord = @"";
            this.UserName = @"";
            this.IsActive = true;
            this.Age = 22;
            this.Sex = true;
            this.CityId = 860571;
            this.WeChatNo = @"";
            this.ImageUrl = @"";
            this.ImageThumb = @"";
            this.CreateTime = DateTime.Now;
            this.ShoppingCarts = new List<ShoppingCart>();
            this.UserShares = new List<UserShare>();
            this.UserandAllies = new List<UserandAllies>();
            this.Orders = new List<Order>();
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 登陆手机号
        /// </summary>
        public virtual string Cphone
        {
            get;
            set;
        }

        /// <summary>
        /// 登陆密码 
        /// </summary>
        public virtual string PassWord
        {
            get;
            set;
        }

        /// <summary>
        /// 用户名称
        /// </summary>
        public virtual string UserName
        {
            get;
            set;
        }

        /// <summary>
        /// 是否启用
        /// </summary>
        public virtual bool IsActive
        {
            get;
            set;
        }

        /// <summary>
        /// 年龄
        /// </summary>
        public virtual System.Nullable<short> Age
        {
            get;
            set;
        }

        /// <summary>
        /// 性别 
        /// </summary>
        public virtual System.Nullable<bool> Sex
        {
            get;
            set;
        }

        /// <summary>
        /// 城市代码
        /// </summary>
        public virtual System.Nullable<long> CityId
        {
            get;
            set;
        }

        /// <summary>
        /// 微信号
        /// </summary>
        public virtual string WeChatNo
        {
            get;
            set;
        }

        /// <summary>
        /// 头像地址
        /// </summary>
        public virtual string ImageUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 头像缩略图
        /// </summary>
        public virtual string ImageThumb
        {
            get;
            set;
        }

        /// <summary>
        ///  分享图片
        /// </summary>
        public virtual string ShareImage
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for PaySecurity in the schema.
        /// </summary>
        public virtual PaySecurity PaySecurity
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserSource in the schema.
        /// </summary>
        public virtual UserSource UserSource
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for ShoppingCarts in the schema.
        /// </summary>
        public virtual IList<ShoppingCart> ShoppingCarts
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserShares in the schema.
        /// </summary>
        public virtual IList<UserShare> UserShares
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserandAllies in the schema.
        /// </summary>
        public virtual IList<UserandAllies> UserandAllies
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Orders in the schema.
        /// </summary>
        public virtual IList<Order> Orders
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for City in the schema.
        /// </summary>
        public virtual City City
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          User toCompare = obj as User;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            User obj = new User();
            obj.Id = Id;
            obj.Cphone = Cphone;
            obj.PassWord = PassWord;
            obj.UserName = UserName;
            obj.IsActive = IsActive;
            obj.Age = Age;
            obj.Sex = Sex;
            obj.CityId = CityId;
            obj.WeChatNo = WeChatNo;
            obj.ImageUrl = ImageUrl;
            obj.ImageThumb = ImageThumb;
            obj.ShareImage = ShareImage;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 友商
    /// </summary>
    [Serializable()]
    public partial class allies : ICloneable {

        /// <summary>
        /// There are no comments for allies constructor in the schema.
        /// </summary>
        public allies()
        {
            this.Name = @"";
            this.IsActive = true;
            this.CreateTime = DateTime.Now;
            this.UpdateTime = DateTime.Now;
            this.UserandAllies = new List<UserandAllies>();
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 名称
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

        /// <summary>
        /// 是否启用
        /// </summary>
        public virtual bool IsActive
        {
            get;
            set;
        }

        /// <summary>
        /// 分享图片
        /// </summary>
        public virtual string ShareImage
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// 更新时间 
        /// </summary>
        public virtual System.DateTime UpdateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UserandAllies in the schema.
        /// </summary>
        public virtual IList<UserandAllies> UserandAllies
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          allies toCompare = obj as allies;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            allies obj = new allies();
            obj.Id = Id;
            obj.Name = Name;
            obj.IsActive = IsActive;
            obj.ShareImage = ShareImage;
            obj.CreateTime = CreateTime;
            obj.UpdateTime = UpdateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 用户来源信息
    /// </summary>
    [Serializable()]
    public partial class UserSource : ICloneable {

        /// <summary>
        /// There are no comments for UserSource constructor in the schema.
        /// </summary>
        public UserSource()
        {
            this.UserId = 0;
            this.From = (Cowboy.TravelShop.Model.UserFrom)Enum.Parse(typeof(Cowboy.TravelShop.Model.UserFrom), "0");
            this.Adress = @"";
            this.City = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 用户来源类型
        /// </summary>
        public virtual UserFrom From
        {
            get;
            set;
        }

        /// <summary>
        /// 地址
        /// </summary>
        public virtual string Adress
        {
            get;
            set;
        }

        /// <summary>
        /// 城市 
        /// </summary>
        public virtual string City
        {
            get;
            set;
        }

        /// <summary>
        /// 城市代码 
        /// </summary>
        public virtual long CityId
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        public virtual User User
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          UserSource toCompare = obj as UserSource;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.UserId, toCompare.UserId))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + UserId.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            UserSource obj = new UserSource();
            obj.UserId = UserId;
            obj.From = From;
            obj.Adress = Adress;
            obj.City = City;
            obj.CityId = CityId;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 支付安全信息
    /// </summary>
    [Serializable()]
    public partial class PaySecurity : ICloneable {

        /// <summary>
        /// There are no comments for PaySecurity constructor in the schema.
        /// </summary>
        public PaySecurity()
        {
            this.PayPassWord = @"";
            this.CreateTime = DateTime.Now;
            this.UpdateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 支付密码 
        /// </summary>
        public virtual string PayPassWord
        {
            get;
            set;
        }

        /// <summary>
        /// 创建人员 
        /// </summary>
        public virtual long CreateBy
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// 更新人员
        /// </summary>
        public virtual long UpdateBy
        {
            get;
            set;
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public virtual System.DateTime UpdateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        public virtual User User
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          PaySecurity toCompare = obj as PaySecurity;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.UserId, toCompare.UserId))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + UserId.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            PaySecurity obj = new PaySecurity();
            obj.UserId = UserId;
            obj.PayPassWord = PayPassWord;
            obj.CreateBy = CreateBy;
            obj.CreateTime = CreateTime;
            obj.UpdateBy = UpdateBy;
            obj.UpdateTime = UpdateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 用户与友商关系
    /// </summary>
    [Serializable()]
    public partial class UserandAllies : ICloneable {

        /// <summary>
        /// There are no comments for UserandAllies constructor in the schema.
        /// </summary>
        public UserandAllies()
        {
            this.IsActive = true;
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 友商编号
        /// </summary>
        public virtual long AlliesId
        {
            get;
            set;
        }

        /// <summary>
        /// 是否启用
        /// </summary>
        public virtual bool IsActive
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for allies in the schema.
        /// </summary>
        public virtual allies allies
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        public virtual User User
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          UserandAllies toCompare = obj as UserandAllies;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            UserandAllies obj = new UserandAllies();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.AlliesId = AlliesId;
            obj.IsActive = IsActive;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 用户与用户关系
    /// </summary>
    [Serializable()]
    public partial class UserandUser : ICloneable {

        /// <summary>
        /// There are no comments for UserandUser constructor in the schema.
        /// </summary>
        public UserandUser()
        {
            this.Remark = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 邀请用户编号
        /// </summary>
        public virtual long InvitedUser
        {
            get;
            set;
        }

        /// <summary>
        /// 备注
        /// </summary>
        public virtual string Remark
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          UserandUser toCompare = obj as UserandUser;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            UserandUser obj = new UserandUser();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.InvitedUser = InvitedUser;
            obj.Remark = Remark;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 第三方登陆
    /// </summary>
    [Serializable()]
    public partial class ThirdPartyLogin : ICloneable {

        /// <summary>
        /// There are no comments for ThirdPartyLogin constructor in the schema.
        /// </summary>
        public ThirdPartyLogin()
        {
            this.OpenId = @"";
            this.Sex = true;
            this.Age = 18;
            this.Adress = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 类型
        /// </summary>
        public virtual LoginType Type
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for OpenId in the schema.
        /// </summary>
        public virtual string OpenId
        {
            get;
            set;
        }

        /// <summary>
        /// 性别 
        /// </summary>
        public virtual bool Sex
        {
            get;
            set;
        }

        /// <summary>
        /// 年龄
        /// </summary>
        public virtual byte Age
        {
            get;
            set;
        }

        /// <summary>
        /// 地址
        /// </summary>
        public virtual string Adress
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          ThirdPartyLogin toCompare = obj as ThirdPartyLogin;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            ThirdPartyLogin obj = new ThirdPartyLogin();
            obj.Id = Id;
            obj.Type = Type;
            obj.OpenId = OpenId;
            obj.Sex = Sex;
            obj.Age = Age;
            obj.Adress = Adress;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 行程
    /// </summary>
    [Serializable()]
    public partial class Stroke : ICloneable {

        /// <summary>
        /// There are no comments for Stroke constructor in the schema.
        /// </summary>
        public Stroke()
        {
            this.Title = @"";
            this.SearchKey = @"";
            this.ImageUrl = @"";
            this.ImageThumb = @"";
            this.NumberDay = 3;
            this.IsActive = true;
            this.IsRecommend = false;
            this.IsHot = false;
            this.IsNew = false;
            this.City = @"";
            this.Price = 0m;
            this.Destination = @"";
            this.SpecialPrice = 0m;
            this.CreateTime = DateTime.Now;
            this.StokeCollects = new List<StrokeCollect>();
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 名称 
        /// </summary>
        public virtual string Title
        {
            get;
            set;
        }

        /// <summary>
        /// 详情
        /// </summary>
        public virtual string Detail
        {
            get;
            set;
        }

        /// <summary>
        /// 搜索关键字
        /// </summary>
        public virtual string SearchKey
        {
            get;
            set;
        }

        /// <summary>
        /// 种类编号
        /// </summary>
        public virtual long CategoryId
        {
            get;
            set;
        }

        /// <summary>
        /// 封面图片地址
        /// </summary>
        public virtual string ImageUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 封面图片缩略图
        /// </summary>
        public virtual string ImageThumb
        {
            get;
            set;
        }

        /// <summary>
        /// 游玩天数
        /// </summary>
        public virtual sbyte NumberDay
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for IsActive in the schema.
        /// </summary>
        public virtual bool IsActive
        {
            get;
            set;
        }

        /// <summary>
        /// 是否为推荐
        /// </summary>
        public virtual bool IsRecommend
        {
            get;
            set;
        }

        /// <summary>
        /// 是否热门
        /// </summary>
        public virtual bool IsHot
        {
            get;
            set;
        }

        /// <summary>
        /// 是否新品
        /// </summary>
        public virtual bool IsNew
        {
            get;
            set;
        }

        /// <summary>
        /// 出发城市
        /// </summary>
        public virtual string City
        {
            get;
            set;
        }

        /// <summary>
        /// 标准价格
        /// </summary>
        public virtual decimal Price
        {
            get;
            set;
        }

        /// <summary>
        /// 目的地
        /// </summary>
        public virtual string Destination
        {
            get;
            set;
        }

        /// <summary>
        /// 优惠价格
        /// </summary>
        public virtual decimal SpecialPrice
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for StokeShare in the schema.
        /// </summary>
        public virtual StrokeShare StokeShare
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for StokeCollects in the schema.
        /// </summary>
        public virtual IList<StrokeCollect> StokeCollects
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for StokeCategory in the schema.
        /// </summary>
        public virtual StrokeCategory StokeCategory
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Stroke toCompare = obj as Stroke;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Stroke obj = new Stroke();
            obj.Id = Id;
            obj.Title = Title;
            obj.Detail = Detail;
            obj.SearchKey = SearchKey;
            obj.CategoryId = CategoryId;
            obj.ImageUrl = ImageUrl;
            obj.ImageThumb = ImageThumb;
            obj.NumberDay = NumberDay;
            obj.IsActive = IsActive;
            obj.IsRecommend = IsRecommend;
            obj.IsHot = IsHot;
            obj.IsNew = IsNew;
            obj.City = City;
            obj.Price = Price;
            obj.Destination = Destination;
            obj.SpecialPrice = SpecialPrice;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 行程种类
    /// </summary>
    [Serializable()]
    public partial class StrokeCategory : ICloneable {

        /// <summary>
        /// There are no comments for StrokeCategory constructor in the schema.
        /// </summary>
        public StrokeCategory()
        {
            this.CategoryName = @"";
            this.IsActive = true;
            this.CreateTime = DateTime.Now;
            this.Stokes = new List<Stroke>();
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 种类名称
        /// </summary>
        public virtual string CategoryName
        {
            get;
            set;
        }

        /// <summary>
        /// 是否启用
        /// </summary>
        public virtual bool IsActive
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间 
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Stokes in the schema.
        /// </summary>
        public virtual IList<Stroke> Stokes
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          StrokeCategory toCompare = obj as StrokeCategory;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            StrokeCategory obj = new StrokeCategory();
            obj.Id = Id;
            obj.CategoryName = CategoryName;
            obj.IsActive = IsActive;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 行程收藏
    /// </summary>
    [Serializable()]
    public partial class StrokeCollect : ICloneable {

        /// <summary>
        /// There are no comments for StrokeCollect constructor in the schema.
        /// </summary>
        public StrokeCollect()
        {
            this.IsActive = true;
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 是否启用
        /// </summary>
        public virtual bool IsActive
        {
            get;
            set;
        }

        /// <summary>
        /// 路程编号
        /// </summary>
        public virtual long StrokeId
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Stoke in the schema.
        /// </summary>
        public virtual Stroke Stoke
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          StrokeCollect toCompare = obj as StrokeCollect;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            StrokeCollect obj = new StrokeCollect();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.IsActive = IsActive;
            obj.StrokeId = StrokeId;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 路程分享 
    /// </summary>
    [Serializable()]
    public partial class StrokeShare : ICloneable {

        /// <summary>
        /// There are no comments for StrokeShare constructor in the schema.
        /// </summary>
        public StrokeShare()
        {
            this.ShareNumber = 0;
            this.CreateTime = DateTime.Now;
            this.UpdateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 行程编号
        /// </summary>
        public virtual long StrokeId
        {
            get;
            set;
        }

        /// <summary>
        /// 分享数量
        /// </summary>
        public virtual short ShareNumber
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public virtual System.DateTime UpdateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Stoke in the schema.
        /// </summary>
        public virtual Stroke Stoke
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          StrokeShare toCompare = obj as StrokeShare;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            StrokeShare obj = new StrokeShare();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.StrokeId = StrokeId;
            obj.ShareNumber = ShareNumber;
            obj.CreateTime = CreateTime;
            obj.UpdateTime = UpdateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 订单
    /// </summary>
    [Serializable()]
    public partial class Order : ICloneable {

        /// <summary>
        /// There are no comments for Order constructor in the schema.
        /// </summary>
        public Order()
        {
            this.OrderNo = @"";
            this.Title = @"";
            this.NumberDay = 3;
            this.OrderStatus = (Cowboy.TravelShop.Model.OrderStatus)Enum.Parse(typeof(Cowboy.TravelShop.Model.OrderStatus), "0");
            this.Price = 0m;
            this.TotalAmount = 0m;
            this.ShareUser = 0;
            this.From = (Cowboy.TravelShop.Model.UserFrom)Enum.Parse(typeof(Cowboy.TravelShop.Model.UserFrom), "0");
            this.Remark = @"";
            this.CreateTime = DateTime.Now;
            this.UpdateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 订单单号
        /// </summary>
        public virtual string OrderNo
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 行程编号
        /// </summary>
        public virtual long StrokeId
        {
            get;
            set;
        }

        /// <summary>
        /// 出发城市
        /// </summary>
        public virtual string City
        {
            get;
            set;
        }

        /// <summary>
        ///  行程标题
        /// </summary>
        public virtual string Title
        {
            get;
            set;
        }

        /// <summary>
        /// 行程封面
        /// </summary>
        public virtual string ImageUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 目的地
        /// </summary>
        public virtual string Destination
        {
            get;
            set;
        }

        /// <summary>
        /// 游玩天数
        /// </summary>
        public virtual sbyte NumberDay
        {
            get;
            set;
        }

        /// <summary>
        /// 订单状态
        /// </summary>
        public virtual OrderStatus OrderStatus
        {
            get;
            set;
        }

        /// <summary>
        /// 单价
        /// </summary>
        public virtual decimal Price
        {
            get;
            set;
        }

        /// <summary>
        /// 订单数量
        /// </summary>
        public virtual short TotalCount
        {
            get;
            set;
        }

        /// <summary>
        /// 订单总金额
        /// </summary>
        public virtual decimal TotalAmount
        {
            get;
            set;
        }

        /// <summary>
        /// 支付方式
        /// </summary>
        public virtual PaymentType Payment
        {
            get;
            set;
        }

        /// <summary>
        /// 分享用户源
        /// </summary>
        public virtual long ShareUser
        {
            get;
            set;
        }

        /// <summary>
        /// 分享来源
        /// </summary>
        public virtual UserFrom From
        {
            get;
            set;
        }

        /// <summary>
        /// 备注
        /// </summary>
        public virtual string Remark
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public virtual System.DateTime UpdateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        public virtual User User
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Order toCompare = obj as Order;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Order obj = new Order();
            obj.Id = Id;
            obj.OrderNo = OrderNo;
            obj.UserId = UserId;
            obj.StrokeId = StrokeId;
            obj.City = City;
            obj.Title = Title;
            obj.ImageUrl = ImageUrl;
            obj.Destination = Destination;
            obj.NumberDay = NumberDay;
            obj.OrderStatus = OrderStatus;
            obj.Price = Price;
            obj.TotalCount = TotalCount;
            obj.TotalAmount = TotalAmount;
            obj.Payment = Payment;
            obj.ShareUser = ShareUser;
            obj.From = From;
            obj.Remark = Remark;
            obj.CreateTime = CreateTime;
            obj.UpdateTime = UpdateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 购物车
    /// </summary>
    [Serializable()]
    public partial class ShoppingCart : ICloneable {

        /// <summary>
        /// There are no comments for ShoppingCart constructor in the schema.
        /// </summary>
        public ShoppingCart()
        {
            this.Remark = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号 
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 行程编号
        /// </summary>
        public virtual long StrokeId
        {
            get;
            set;
        }

        /// <summary>
        /// 数量
        /// </summary>
        public virtual short Quantity
        {
            get;
            set;
        }

        /// <summary>
        /// 备注
        /// </summary>
        public virtual string Remark
        {
            get;
            set;
        }

        /// <summary>
        /// 创建人员
        /// </summary>
        public virtual long CreateBy
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        public virtual User User
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          ShoppingCart toCompare = obj as ShoppingCart;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            ShoppingCart obj = new ShoppingCart();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.StrokeId = StrokeId;
            obj.Quantity = Quantity;
            obj.Remark = Remark;
            obj.CreateBy = CreateBy;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 城市
    /// </summary>
    [Serializable()]
    public partial class City : ICloneable {

        /// <summary>
        /// There are no comments for City constructor in the schema.
        /// </summary>
        public City()
        {
            this.IsOpen = false;
            this.IsHot = false;
            this.Name = @"";
            this.SimpleSpell = @"";
            this.FullSpell = @"";
            this.CreateTime = DateTime.Now;
            this.Users = new List<User>();
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 是否开放
        /// </summary>
        public virtual bool IsOpen
        {
            get;
            set;
        }

        /// <summary>
        /// 是否热门
        /// </summary>
        public virtual bool IsHot
        {
            get;
            set;
        }

        /// <summary>
        /// 名称
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

        /// <summary>
        /// 父级编号
        /// </summary>
        public virtual long ParentId
        {
            get;
            set;
        }

        /// <summary>
        /// 拼音简写
        /// </summary>
        public virtual string SimpleSpell
        {
            get;
            set;
        }

        /// <summary>
        /// 拼音全写
        /// </summary>
        public virtual string FullSpell
        {
            get;
            set;
        }

        /// <summary>
        /// 创建人员
        /// </summary>
        public virtual long CreateBy
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Users in the schema.
        /// </summary>
        public virtual IList<User> Users
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          City toCompare = obj as City;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            City obj = new City();
            obj.Id = Id;
            obj.IsOpen = IsOpen;
            obj.IsHot = IsHot;
            obj.Name = Name;
            obj.ParentId = ParentId;
            obj.SimpleSpell = SimpleSpell;
            obj.FullSpell = FullSpell;
            obj.CreateBy = CreateBy;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 支付信息
    /// </summary>
    [Serializable()]
    public partial class Payment : ICloneable {

        /// <summary>
        /// There are no comments for Payment constructor in the schema.
        /// </summary>
        public Payment()
        {
            this.OrderIds = @"";
            this.PayEnvironment = 1;
            this.Status = false;
            this.CreateBy = 0;
            this.CreateTime = DateTime.Now;
            this.UpdateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 订单编号
        /// </summary>
        public virtual string OrderIds
        {
            get;
            set;
        }

        /// <summary>
        /// 支付环境
        /// </summary>
        public virtual byte PayEnvironment
        {
            get;
            set;
        }

        /// <summary>
        /// 支付方式
        /// </summary>
        public virtual PaymentType PaymentType
        {
            get;
            set;
        }

        /// <summary>
        /// 支付状态
        /// </summary>
        public virtual bool Status
        {
            get;
            set;
        }

        /// <summary>
        /// 创建人员
        /// </summary>
        public virtual long CreateBy
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// 更新人员
        /// </summary>
        public virtual long UpdateBy
        {
            get;
            set;
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public virtual System.DateTime UpdateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for PaymentCallback in the schema.
        /// </summary>
        public virtual PaymentCallback PaymentCallback
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Payment toCompare = obj as Payment;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Payment obj = new Payment();
            obj.Id = Id;
            obj.OrderIds = OrderIds;
            obj.PayEnvironment = PayEnvironment;
            obj.PaymentType = PaymentType;
            obj.Status = Status;
            obj.CreateBy = CreateBy;
            obj.CreateTime = CreateTime;
            obj.UpdateBy = UpdateBy;
            obj.UpdateTime = UpdateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 支付回调信息
    /// </summary>
    [Serializable()]
    public partial class PaymentCallback : ICloneable {

        /// <summary>
        /// There are no comments for PaymentCallback constructor in the schema.
        /// </summary>
        public PaymentCallback()
        {
            this.OutTradeStatus = true;
            this.TradeNo = @"";
            this.OutTradeParameter = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        ///  编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 支付编号
        /// </summary>
        public virtual long PaymentId
        {
            get;
            set;
        }

        /// <summary>
        /// 支付状态
        /// </summary>
        public virtual bool OutTradeStatus
        {
            get;
            set;
        }

        /// <summary>
        /// 第三方交易凭证号
        /// </summary>
        public virtual string TradeNo
        {
            get;
            set;
        }

        /// <summary>
        /// 支付回调详细信息
        /// </summary>
        public virtual string OutTradeParameter
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Payment in the schema.
        /// </summary>
        public virtual Payment Payment
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          PaymentCallback toCompare = obj as PaymentCallback;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            PaymentCallback obj = new PaymentCallback();
            obj.Id = Id;
            obj.PaymentId = PaymentId;
            obj.OutTradeStatus = OutTradeStatus;
            obj.TradeNo = TradeNo;
            obj.OutTradeParameter = OutTradeParameter;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 广告
    /// </summary>
    [Serializable()]
    public partial class Ad : ICloneable {

        /// <summary>
        /// There are no comments for Ad constructor in the schema.
        /// </summary>
        public Ad()
        {
            this.Title = @"";
            this.Type = (Cowboy.TravelShop.Model.ADType)Enum.Parse(typeof(Cowboy.TravelShop.Model.ADType), "1");
            this.StrokeId = 0;
            this.Link = @"";
            this.Content = @"";
            this.ImageUrl = @"";
            this.ImageThumb = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 标题
        /// </summary>
        public virtual string Title
        {
            get;
            set;
        }

        /// <summary>
        /// 类型
        /// </summary>
        public virtual ADType Type
        {
            get;
            set;
        }

        /// <summary>
        /// 行程编号
        /// </summary>
        public virtual long StrokeId
        {
            get;
            set;
        }

        /// <summary>
        /// 启用状态
        /// </summary>
        public virtual bool IsActive
        {
            get;
            set;
        }

        /// <summary>
        /// 链接
        /// </summary>
        public virtual string Link
        {
            get;
            set;
        }

        /// <summary>
        /// 城市编号
        /// </summary>
        public virtual long CityId
        {
            get;
            set;
        }

        /// <summary>
        /// 内容
        /// </summary>
        public virtual string Content
        {
            get;
            set;
        }

        /// <summary>
        /// 图片地址
        /// </summary>
        public virtual string ImageUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 缩略图
        /// </summary>
        public virtual string ImageThumb
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Ad toCompare = obj as Ad;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Ad obj = new Ad();
            obj.Id = Id;
            obj.Title = Title;
            obj.Type = Type;
            obj.StrokeId = StrokeId;
            obj.IsActive = IsActive;
            obj.Link = Link;
            obj.CityId = CityId;
            obj.Content = Content;
            obj.ImageUrl = ImageUrl;
            obj.ImageThumb = ImageThumb;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 验证码短信
    /// </summary>
    [Serializable()]
    public partial class SmsSend : ICloneable {

        /// <summary>
        /// There are no comments for SmsSend constructor in the schema.
        /// </summary>
        public SmsSend()
        {
            this.Title = @"";
            this.Cphone = @"";
            this.Content = @"";
            this.Code = @"";
            this.IsSuccess = true;
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 标题
        /// </summary>
        public virtual string Title
        {
            get;
            set;
        }

        /// <summary>
        /// 手机号码
        /// </summary>
        public virtual string Cphone
        {
            get;
            set;
        }

        /// <summary>
        /// 内容
        /// </summary>
        public virtual string Content
        {
            get;
            set;
        }

        /// <summary>
        /// 验证码 
        /// </summary>
        public virtual string Code
        {
            get;
            set;
        }

        /// <summary>
        /// 是否发送成功
        /// </summary>
        public virtual bool IsSuccess
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          SmsSend toCompare = obj as SmsSend;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            SmsSend obj = new SmsSend();
            obj.Id = Id;
            obj.Title = Title;
            obj.Cphone = Cphone;
            obj.Content = Content;
            obj.Code = Code;
            obj.IsSuccess = IsSuccess;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 定制 
    /// </summary>
    [Serializable()]
    public partial class Customize : ICloneable {

        /// <summary>
        /// There are no comments for Customize constructor in the schema.
        /// </summary>
        public Customize()
        {
            this.StartCity = @"";
            this.Destination = @"";
            this.CustomizeNo = @"";
            this.Cphone = @"";
            this.Adult = 0;
            this.Type = 1;
            this.Children = 0;
            this.TotalAmount = 0m;
            this.Name = @"";
            this.Budget = 0m;
            this.NumberDay = 3;
            this.StartDate = DateTime.Now;
            this.Remark = @"";
            this.CreateTime = DateTime.Now;
            this.UpdateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 出发城市
        /// </summary>
        public virtual string StartCity
        {
            get;
            set;
        }

        /// <summary>
        /// 目的地 
        /// </summary>
        public virtual string Destination
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for CustomizeNo in the schema.
        /// </summary>
        public virtual string CustomizeNo
        {
            get;
            set;
        }

        /// <summary>
        /// 手机号码 
        /// </summary>
        public virtual string Cphone
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        /// <remark>
        /// 定制状态
        /// </remark>
        public virtual CustomizeStatus Status
        {
            get;
            set;
        }

        /// <summary>
        /// 成人人数
        /// </summary>
        public virtual int Adult
        {
            get;
            set;
        }

        /// <summary>
        /// 定制类型
        /// </summary>
        public virtual int Type
        {
            get;
            set;
        }

        /// <summary>
        /// 儿童人数
        /// </summary>
        public virtual int Children
        {
            get;
            set;
        }

        /// <summary>
        /// 定制总价格
        /// </summary>
        public virtual decimal TotalAmount
        {
            get;
            set;
        }

        /// <summary>
        /// 预定人
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

        /// <summary>
        /// 人均预算
        /// </summary>
        public virtual decimal Budget
        {
            get;
            set;
        }

        /// <summary>
        /// 游玩天数
        /// </summary>
        public virtual int NumberDay
        {
            get;
            set;
        }

        /// <summary>
        /// 开始日期
        /// </summary>
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }

        /// <summary>
        /// 备注
        /// </summary>
        public virtual string Remark
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for UpdateTime in the schema.
        /// </summary>
        public virtual System.DateTime UpdateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Customize toCompare = obj as Customize;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Customize obj = new Customize();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.StartCity = StartCity;
            obj.Destination = Destination;
            obj.CustomizeNo = CustomizeNo;
            obj.Cphone = Cphone;
            obj.Status = Status;
            obj.Adult = Adult;
            obj.Type = Type;
            obj.Children = Children;
            obj.TotalAmount = TotalAmount;
            obj.Name = Name;
            obj.Budget = Budget;
            obj.NumberDay = NumberDay;
            obj.StartDate = StartDate;
            obj.Remark = Remark;
            obj.CreateTime = CreateTime;
            obj.UpdateTime = UpdateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 验证码记录信息 
    /// </summary>
    [Serializable()]
    public partial class VerificationCode : ICloneable {

        /// <summary>
        /// There are no comments for VerificationCode constructor in the schema.
        /// </summary>
        public VerificationCode()
        {
            this.Title = @"";
            this.Type = 1;
            this.Content = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 标题
        /// </summary>
        public virtual string Title
        {
            get;
            set;
        }

        /// <summary>
        /// 类型
        /// </summary>
        public virtual byte Type
        {
            get;
            set;
        }

        /// <summary>
        /// 内容
        /// </summary>
        public virtual string Content
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          VerificationCode toCompare = obj as VerificationCode;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            VerificationCode obj = new VerificationCode();
            obj.Id = Id;
            obj.Title = Title;
            obj.Type = Type;
            obj.Content = Content;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 群发短信
    /// </summary>
    [Serializable()]
    public partial class GroupSending : ICloneable {

        /// <summary>
        /// There are no comments for GroupSending constructor in the schema.
        /// </summary>
        public GroupSending()
        {
            this.Title = @"";
            this.Type = 1;
            this.Content = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 标题
        /// </summary>
        public virtual string Title
        {
            get;
            set;
        }

        /// <summary>
        /// 类型
        /// </summary>
        public virtual byte Type
        {
            get;
            set;
        }

        /// <summary>
        /// 内容
        /// </summary>
        public virtual string Content
        {
            get;
            set;
        }

        /// <summary>
        /// 数量
        /// </summary>
        public virtual long Quantity
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          GroupSending toCompare = obj as GroupSending;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            GroupSending obj = new GroupSending();
            obj.Id = Id;
            obj.Title = Title;
            obj.Type = Type;
            obj.Content = Content;
            obj.Quantity = Quantity;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 管理员
    /// </summary>
    [Serializable()]
    public partial class Manager : ICloneable {

        /// <summary>
        /// There are no comments for Manager constructor in the schema.
        /// </summary>
        public Manager()
        {
            this.PassWord = @"";
            this.Name = @"";
            this.ImageUrl = @"";
            this.ImageThumb = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 手机号
        /// </summary>
        public virtual string Cphone
        {
            get;
            set;
        }

        /// <summary>
        /// 密码
        /// </summary>
        public virtual string PassWord
        {
            get;
            set;
        }

        /// <summary>
        /// 管理员名称
        /// </summary>
        public virtual string Name
        {
            get;
            set;
        }

        /// <summary>
        /// 头像地址
        /// </summary>
        public virtual string ImageUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 头像缩略图
        /// </summary>
        public virtual string ImageThumb
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Manager toCompare = obj as Manager;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Manager obj = new Manager();
            obj.Id = Id;
            obj.Cphone = Cphone;
            obj.PassWord = PassWord;
            obj.Name = Name;
            obj.ImageUrl = ImageUrl;
            obj.ImageThumb = ImageThumb;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 用户分享
    /// </summary>
    [Serializable()]
    public partial class UserShare : ICloneable {

        /// <summary>
        /// There are no comments for UserShare constructor in the schema.
        /// </summary>
        public UserShare()
        {
            this.Type = 1;
            this.ImageUrl = @"";
            this.ImageThumb = @"";
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 类型
        /// </summary>
        public virtual byte Type
        {
            get;
            set;
        }

        /// <summary>
        /// 分享图片地址
        /// </summary>
        public virtual string ImageUrl
        {
            get;
            set;
        }

        /// <summary>
        /// 分享图片缩略图
        /// </summary>
        public virtual string ImageThumb
        {
            get;
            set;
        }

        /// <summary>
        /// 创建人员
        /// </summary>
        public virtual long CreateBy
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for User in the schema.
        /// </summary>
        public virtual User User
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          UserShare toCompare = obj as UserShare;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            UserShare obj = new UserShare();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.Type = Type;
            obj.ImageUrl = ImageUrl;
            obj.ImageThumb = ImageThumb;
            obj.CreateBy = CreateBy;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 用户积分
    /// </summary>
    [Serializable()]
    public partial class Integral : ICloneable {

        /// <summary>
        /// There are no comments for Integral constructor in the schema.
        /// </summary>
        public Integral()
        {
            this.Number = 0;
            this.CreateTime = DateTime.Now;
            this.UpdateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 积分数量
        /// </summary>
        public virtual long Number
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }

        /// <summary>
        /// 更新时间
        /// </summary>
        public virtual System.DateTime UpdateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          Integral toCompare = obj as Integral;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.UserId, toCompare.UserId))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + UserId.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            Integral obj = new Integral();
            obj.UserId = UserId;
            obj.Number = Number;
            obj.CreateTime = CreateTime;
            obj.UpdateTime = UpdateTime;
            return obj;
        }

        #endregion
    }
    /// <summary>
    /// 积分变化记录
    /// </summary>
    [Serializable()]
    public partial class IntegralRecord : ICloneable {

        /// <summary>
        /// There are no comments for IntegralRecord constructor in the schema.
        /// </summary>
        public IntegralRecord()
        {
            this.CreateTime = DateTime.Now;
            OnCreated();
        }

        /// <summary>
        /// 编号
        /// </summary>
        public virtual long Id
        {
            get;
            set;
        }

        /// <summary>
        /// 用户编号
        /// </summary>
        public virtual long UserId
        {
            get;
            set;
        }

        /// <summary>
        /// 记录类型
        /// </summary>
        public virtual int Type
        {
            get;
            set;
        }

        /// <summary>
        /// 变化数量
        /// </summary>
        public virtual long Number
        {
            get;
            set;
        }

        /// <summary>
        /// 创建时间
        /// </summary>
        public virtual System.DateTime CreateTime
        {
            get;
            set;
        }
    
        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          IntegralRecord toCompare = obj as IntegralRecord;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.Id, toCompare.Id))
            return false;
          
          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + Id.GetHashCode();
          return hashCode;
        }
        
        #endregion
    
        #region ICloneable Members

        public virtual object Clone()
        {
            IntegralRecord obj = new IntegralRecord();
            obj.Id = Id;
            obj.UserId = UserId;
            obj.Type = Type;
            obj.Number = Number;
            obj.CreateTime = CreateTime;
            return obj;
        }

        #endregion
    }

}

namespace Cowboy.TravelShop.Model
{
    /// <summary>
    /// 用户来源类型
    /// </summary>
    public enum UserFrom : int
    {
        /// <summary>
        /// 搜索而来
        /// </summary>

        Search = 0,        /// <summary>
        /// 用户分享
        /// </summary>

        UserShare = 1,        /// <summary>
        /// 友商分享
        /// </summary>

        AlliesShare = 2,        /// <summary>
        /// 广告
        /// </summary>

        Ad = 3,        /// <summary>
        /// There are no comments for UserFrom.Other in the schema.
        /// </summary>

        Other = 4
    }
    /// <summary>
    /// 订单状态
    /// </summary>
    public enum OrderStatus : int
    {
        /// <summary>
        /// 取消
        /// </summary>

        Cancel = -1,        /// <summary>
        /// 未支付
        /// </summary>

        NoPaid = 0,        /// <summary>
        /// 已支付 
        /// </summary>

        Paid = 1,        /// <summary>
        /// 同意
        /// </summary>

        Agree = 2,        /// <summary>
        /// 完成
        /// </summary>

        Complete = 3
    }
    /// <summary>
    /// 登陆方式
    /// </summary>
    public enum LoginType : byte
    {
        /// <summary>
        /// 微信
        /// </summary>

        WeChat = 1,        /// <summary>
        /// QQ
        /// </summary>

        QQ = 2,        /// <summary>
        /// 邮箱
        /// </summary>

        Email = 3
    }
    /// <summary>
    /// 广告类型
    /// </summary>
    public enum ADType : int
    {
        /// <summary>
        /// Banner
        /// </summary>

        Banner = 1,        /// <summary>
        /// 页面广告
        /// </summary>

        Pages = 2
    }
    /// <summary>
    /// There are no comments for Cowboy.TravelShop.Model.PaymentType in the schema.
    /// </summary>
    public enum PaymentType : int
    {
        /// <summary>
        /// There are no comments for PaymentType.WeChat in the schema.
        /// </summary>

        WeChat = 1,        /// <summary>
        /// There are no comments for PaymentType.AliPay in the schema.
        /// </summary>

        AliPay = 2
    }
    /// <summary>
    /// 定制状态
    /// </summary>
    public enum CustomizeStatus : int
    {
        /// <summary>
        /// 取消
        /// </summary>

        Cancel = -1,        /// <summary>
        /// 等待同意定制
        /// </summary>

        Await = 0,        /// <summary>
        /// 同意定制
        /// </summary>

        Agree = 1,        /// <summary>
        /// 未支付
        /// </summary>

        NoPaid = 2,        /// <summary>
        /// 已支付
        /// </summary>

        Paid = 3,        /// <summary>
        /// 完成
        /// </summary>

        Complete = 4
    }

}
